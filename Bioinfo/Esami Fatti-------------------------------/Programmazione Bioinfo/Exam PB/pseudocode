NW------------------------------------------------------
a= matix NxM +1
a(0,0)=0
for i in m+1:
	a(0,i)=i*gap
for i in n+1(1,n):
	a(i,0)=i*gap

def match

for j in M(1,m+1):
	for i in N(1,n+1):
		a(j,i)=max( match(a(s1(n-1),s2(m-2)))+a(j-1,i-1), a(j-1,i)+gap, a(j,i-1)+gap )

i,j=N,M +1
while i,j !=0:
	if a(j,i)=match(a(s1(n-1))),s2(m-2)+a(j-1,i-1):
		al1=s1(j-1)
		al2=s2(i-1)
		i,j--
	if a(j,i)=a(j-1,i)+gap
		al1=s1(j-1)
		al2='-'
		j--
	if a(j,i)=a(j,i-1)+gap
		al1='-'
		al2=s2(i-1)
		i--

print(al1[::-1],al2[::-1])

SW------------------------------------------------------
a= matix NxM +1
a(0,0)=0
for i in m+1:
	a(0,i)=0
for i in n+1(1,n):
	a(i,0)=0

def match

maxscore,maxn,maxm=0,0,0
for j in M(1,m+1):
	for i in N(1,n+1):
		a(j,i)=max( match(a(s1(n-1),s2(m-2)))+a(j-1,i-1), a(j-1,i)+gap, a(j,i-1)+gap )
		if a(j,i)>maxscore:
			maxscore=a(j,i)
			maxn,maxm=(j,i)

i,j=N,M +1
while a(j,i) !=0:
	if a(maxn,maxm)=match(a(s1(maxn-1))),s2(maxm-2)+a(maxn-1,maxm-1):
		al1=s1(maxn-1)
		al2=s2(maxm-1)
		maxn,maxm--
	if a(j,i)=a(j-1,i)+gap
		al1=s1(j-1)
		al2='-'
		j--
	if a(j,i)=a(j,i-1)+gap
		al1='-'
		al2=s2(i-1)
		i--

print(al1[::-1],al2[::-1])

FORWARD------------------------------------------------------------
a=matrix(state x seq+2) 
transition{b:{y:x,n:y}
	   n:{y:,e:,n:}
	   y:{n:,e:,y:}}
states=[b,y,n,e]
emission={n:{a:,g:,t:,c:}
	  y:{a:,g:,t:,c:}}
a(0,0)=1

for i in state(1,state-1):
	a(i,1)=a(0,0)*transition[b][states[i]]*emission[seq[0]]

for i in seq+1(2,seq+1):
	for j in state(1,state-1):
		score=0
		for k in state(1,state-1):
			score=score+a(k,i-1)*transition[states[k]][states[j]]
		a(j,i)=score*emission[states[j]seq[i-1]]
score=0			
for i in state(1,state-1):
	score54=score+a(i,seq)*transition[states[i][e]]
print(score)

BACKWARD-----------------------------------------------------------
a=matrix(state x seq+2) 
transition{b:{y:x,n:y}
	   n:{y:,e:,n:}
	   y:{n:,e:,y:}}
states=[b,y,n,e]
emission={n:{a:,g:,t:,c:}
	  y:{a:,g:,t:,c:}}

for i in state(1,state-1):
	a(i,seq-2)=transition[states[i][e]]

for i in seq+1(2,seq+1,-1):
	for j in state(1,state-1):
		score=0
		for k in state(1,state-1):
			score=score+a(k,i)*transition[states[k]][states[j]]*emission[state[k][seq[i-1]]]
		a(j,i-1)=score
score=0			
for i in state(1,state-1):
	score=score+a(i,1)*transition[b][states[i]]*emission[states[i][seq[0]]
a(0,0)=score     #sequence|model
print(score)

VITERBIPATH---------------------------------------------------------
a=matrix(state x seq+2) 
transition{b:{y:x,n:y}
	   n:{y:,e:,n:}
	   y:{n:,e:,y:}}
states=[b,y,n,e]
emission={n:{a:,g:,t:,c:}
	  y:{a:,g:,t:,c:}}
a(0,0)=1

ms=float('-inf')
path=[]
vitp=[]
for i in state(1,state-1):
	a(i,1)=a(0,0)*transition[b][states[i]]*emission[seq[0]]
vitp.append('b')

for i in seq+1(2,seq+1):
	for j in state(1,state-1):
		score=0
		for k in state(1,state-1):
			ascore=(a(k,i-1)*transition[states[k]][states[j]]*emission[states[j]seq[i-1]])
			if ascore>score:
				score=ascore
				path=state[K]
		a(j,i)=score
		vitp.append(path)	
	
score=0			
for i in state(1,state-1):
	ascore=a(i,seq)*transition[states[i][e]]
	if ascore>score:
		score=ascore
		path=state[i]
a(state-1,i)=score
vitp.append(path)

print(score,vitp)




